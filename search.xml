<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Django</title>
    <url>/2020/10/11/Django/</url>
    <content><![CDATA[<h6 id="Mac下上传代码到GitHub"><a href="#Mac下上传代码到GitHub" class="headerlink" title="Mac下上传代码到GitHub"></a>Mac下上传代码到GitHub</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch README.md //新建一个记录提交操作的文档</span><br><span class="line">git init //初始化本地仓库</span><br><span class="line">git add README.md //添加</span><br><span class="line">git add *  //加入所有项目</span><br><span class="line">git status //检查状态 如果都是绿的 证明成功</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span>//提交到要地仓库，并写一些注释</span><br><span class="line">git remote add origin git@github.com:youname/Test.git //连接远程仓库并建了一个名叫：origin的别名</span><br><span class="line">git push -u origin master //将本地仓库的东西提交到地址是origin的地址，master分支下</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2020/10/11/Maven/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/xxaann/article/details/104794669">jar包问题</a></p>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>C</title>
    <url>/2020/10/17/C/</url>
    <content><![CDATA[<h2 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h2><p>编译器：把源代码转换成可执行代码的程序</p>
<p>可执行代码：用计算机的机器语言表示的代码，由数字码表示的指令组成</p>
<p>C编译器负责把C代码翻译成特定的机器语言</p>
<p>C编译器还将源代码与C库（库中包含大量的标准函数供用户使用，如printf和scanf）的代码合并成最终的程序，【精确说法：由一个被称为链接器的程序来链接库函数，但在大多数系统中，编译器运行链接器】结果是：生成一个用户可以运行的可执行文件，其中包含着计算机能理解的代码。</p>
<p>编译器还会检查C语言程序是否有效，如果C编译器发现错误，就不生成可执行文件并报错。</p>
<p>C编程的基本策略是：用程序把源代码文件转换为可执行文件；典型的C实现通过编译和链接两个步骤来完成这一过程。编译器把源代码转换成中间代码，链接器把中间代码和其他代码合并，生成可执行文件。                                                                                   </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; //包含另一个文件，告诉编译器把stdio.h中的内容包含在当前程序中，</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stdio.h是C编译器软件包的标准部分，提供键盘输入和屏幕输出的支持</span></span><br><span class="line"><span class="comment">作用：相当于把stdio.h文件中的所有内容都输入该行所在的位置；实际上这是一种拷贝-粘贴的操作，include提供了一种方便的途径共享许多程序共有的信息</span></span><br><span class="line"><span class="comment">这行代码是一条C预处理器指令，通常C编译器在编译前会对源代码做一些准备工作，即预处理</span></span><br><span class="line"><span class="comment">大多数情况下，头文件包含了编译器创建最终可执行程序要用到的信息，头文件帮助编译器把你的程序正确的组合在一起</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">函数是C程序的基本模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*在C语言中，所有变量必须先声明才能使用，即必须列出程序中用到的所有变量名及类型*/</span></span><br><span class="line">  <span class="keyword">int</span> num;<span class="comment">//声明</span></span><br><span class="line">  num = <span class="number">1</span>;<span class="comment">//赋值表达式语句</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I am a simple&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;computer.\n&quot;</span>);<span class="comment">//&quot;\n&quot;告诉计算机另起一行，即把光标移至下一行</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;my favorite color is %d because it is first.\n&quot;</span>, num);<span class="comment">//“%d”告诉计算机以何种形式输出num的值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> weight;</span><br><span class="line">    <span class="keyword">float</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Are you worth your weight in plantinum?\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;let&#x27; s check it out!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter your weight in pounds: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;weight);</span><br><span class="line">  	<span class="comment">/*</span></span><br><span class="line"><span class="comment">  	scanf函数用于读取键盘的输入，“%f”说明读取用户从键盘输入的浮点数，&amp;weight告诉scanf()把输入的值赋给名为weight的变量。使用&amp;符号表明找到weight变量的地点。</span></span><br><span class="line"><span class="comment">  	*/</span></span><br><span class="line"></span><br><span class="line">    value = <span class="number">1700.0</span> * weight * <span class="number">14.5833</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your weight in plantium is worth $%.2f.\n&quot;</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">getchar()函数读取下一个输入字符，因此程序会等待用户输入，</span></span><br><span class="line"><span class="comment">用户键入156并按下enter键（即发送一个换行符）</span></span><br><span class="line"><span class="comment">然后scanf()读取键入的数字，第一个getchar()读取换行符，第二个getchar()让程序暂停，等待输入</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> c[] = <span class="string">&quot;I am a teacher&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(a,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = %s\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %s\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C语言里面复制字符串的库函数, 函数声明包括在专门处理字符串的头文件&lt;string.h&gt;中</span></span><br><span class="line"><span class="comment">char * strcpy( char * dst, const char * src );</span></span><br><span class="line"><span class="comment">这个函数把字符串src复制到一分配好的字符串空间dst中，复制的时候包括标志字符串结尾的空字符一起复制。</span></span><br><span class="line"><span class="comment">操作成功，返回dst，否则返回NULL.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h2><h4 id="输入和输出都是缓冲的"><a href="#输入和输出都是缓冲的" class="headerlink" title="输入和输出都是缓冲的"></a>输入和输出都是缓冲的</h4><p>一次转移一大块信息而不是一字节信息（通常至少512字节）。例如，当程序读取文件时，一块数据被拷贝到缓冲区（一块中介存储区域）。这种缓冲极大的提高了数据传输速率。程序可以检查缓冲区的字节。缓冲在后台处理，所以让人有一种逐字符访问的错觉。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*count.c -- 标准使用I/O*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//argc:程序检查argc的值，查看是否有命令行参数。如果没有，程序将打印一条消息并退出程序</span></span><br><span class="line"><span class="comment">//字符串argv[0]是该程序的名称，显示使用argv[0]而不是程序名，错误消息的描述会随可执行文件名的改变而自动改变</span></span><br><span class="line"><span class="comment">//exit()函数关闭所有打开的文件并结束程序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;<span class="comment">//读取文件时，存储每个字符的地方</span></span><br><span class="line">    FILE *fp;<span class="comment">//文件指针</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s filename\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((fp=fopen(argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open %s\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((ch=getc(fp))!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        putc(ch,<span class="built_in">stdout</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;File %s has %lu characters \n&quot;</span>,argv[<span class="number">1</span>],count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><h4 id="umask-0"><a href="#umask-0" class="headerlink" title="umask(0)"></a>umask(0)</h4><p>linux中的 umask 函数主要用于：在创建新文件或目录时 屏蔽掉新文件或目录不应有的访问允许权限。</p>
<h4 id="goto-remove"><a href="#goto-remove" class="headerlink" title="goto remove;"></a>goto remove;</h4><h4 id="srand-unsigned-time-NULL"><a href="#srand-unsigned-time-NULL" class="headerlink" title="srand((unsigned)time(NULL))"></a>srand((unsigned)time(NULL))</h4><h6 id="——来完成产生随机数的功能"><a href="#——来完成产生随机数的功能" class="headerlink" title="——来完成产生随机数的功能"></a>——来完成产生随机数的功能</h6><p><a href="http://c.biancheng.net/view/2043.html">srand函数是随机数发生器的初始化函数</a></p>
<p>rand() 函数产生的随机数是伪随机数，是根据一个数值按照某个公式推算出来的，这个数值我们称之为“种子”。</p>
<p>种子在每次启动计算机时是随机的，但是一旦计算机启动以后它就不再变化了；也就是说，每次启动计算机以后，种子就是定值了，所以根据公式推算出来的结果（也就是生成的随机数）就是固定的。</p>
<p>我们可以通过 srand() 函数来重新“播种”，这样种子就会发生改变。srand() 的用法为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span>;</span><br></pre></td></tr></table></figure>

<p>它需要一个 unsigned int 类型的参数。在实际开发中，我们可以用时间作为参数，只要每次播种的时间不同，那么生成的种子就不同，最终的随机数也就不同。</p>
<p>使用 &lt;time.h&gt; 头文件中的 time() 函数即可得到当前的时间（精确到秒），就像下面这样</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br></pre></td></tr></table></figure>

<p>生成随机数之前先进行播种，多次运行程序，会发现每次生成的随机数都不一样了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    a = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="int-main-void"><a href="#int-main-void" class="headerlink" title="int main(void)"></a>int main(void)</h4><p>C语言main函数的一种声明方式，表明这个main函数不带参数，但仍需要整数返回值</p>
<h4 id="memset"><a href="#memset" class="headerlink" title="memset( )"></a>memset( )</h4><p><a href="https://www.runoob.com/cprogramming/c-function-memset.html">C 库函数 <strong>void *memset(void *str, int c, size_t n)</strong> 复制字符 <strong>c</strong>（一个无符号字符）到参数 <strong>str</strong> 所指向的字符串的前 <strong>n</strong> 个字符。</a></p>
<h4 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy()"></a>strncpy()</h4><p><a href="https://www.runoob.com/cprogramming/c-function-strncpy.html">C 库函数 <strong>char *strncpy(char *dest, const char *src, size_t n)</strong> 把 <strong>src</strong> 所指向的字符串复制到 <strong>dest</strong>，最多复制 <strong>n</strong> 个字符。当 src 的长度小于 n 时，dest 的剩余部分将用空字节填充。</a></p>
<h4 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h4><p>用来向标准输出设备（屏幕）输出字符串并换行，但也仅限于输出字符串，没有printf()功能强大</p>
<h4 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp()"></a>strncmp()</h4><p><a href="https://www.runoob.com/cprogramming/c-function-strncmp.html">C 库函数 <strong>int strncmp(const char *str1, const char *str2, size_t n)</strong> 把 <strong>str1</strong> 和 <strong>str2</strong> 进行比较，最多比较前 <strong>n</strong> 个字节</a></p>
<h4 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h4><p><a href="https://www.runoob.com/cprogramming/c-function-fgets.html">C 库函数 <strong>char *fgets(char *str, int n, FILE *stream)</strong> 从指定的流 stream 读取一行，并把它存储在 <strong>str</strong> 所指向的字符串内。当读取 <strong>(n-1)</strong> 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止</a></p>
<p><strong>fgets(st,n,stdin)</strong> 中的 stdin 表示标准输入，一般是从输入设备如键盘的缓冲区输入</p>
<h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h4><p><a href="https://www.runoob.com/cprogramming/c-function-malloc.html">C 库函数 <strong>void *malloc(size_t size)</strong> 分配所需的内存空间，并返回一个指向它的指针。</a></p>
<h4 id="size-t-VS-ssize-t"><a href="#size-t-VS-ssize-t" class="headerlink" title="size_t VS. ssize_t"></a>size_t VS. ssize_t</h4><p>在stddef.h中定义</p>
<h5 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a>size_t</h5><ul>
<li>在32位架构中被定义为:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">size_t</span>;<span class="comment">//4字节</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在64位架构中被定义为</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">size_t</span>;<span class="comment">//8字节</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>而int在不同架构下都是4字节，与size_t不同；</p>
</li>
<li><p>int为带符号数，size_t为无符号数</p>
</li>
<li><p><strong>size_t</strong>一般用来表示一种计数，比如有多少东西被拷贝等。例如：sizeof操作符的结果类型是size_t，该类型保证能容纳实现所建立的最大对象的字节大小。</p>
</li>
<li><p>它的意义大致是“适于计量内存中可容纳的数据项目个数的无符号整数类型”。</p>
</li>
<li><p>在数组下标和内存管理函数之类的地方广泛使用。</p>
</li>
</ul>
<h5 id="ssize-t"><a href="#ssize-t" class="headerlink" title="ssize_t"></a>ssize_t</h5><ul>
<li>在32位架构中被定义为：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="keyword">ssize_t</span>;<span class="comment">//4字节</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在64位架构中被定义为</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">ssize_t</span>;<span class="comment">//8字节</span></span><br></pre></td></tr></table></figure>



<ul>
<li>ssize_t是有符号整型</li>
<li>在32位机器上等同与int，在64位机器上等同与long int.</li>
<li>而<strong>ssize_t</strong>这个数据类型用来<strong>表示可以被执行读写操作的数据块的大小</strong>.它和size_t类似,但必需是signed.</li>
<li>从字面上意思来说： ssize_t = signed size_t</li>
</ul>
<h4 id="C语言中宏定义的-define"><a href="#C语言中宏定义的-define" class="headerlink" title="C语言中宏定义的#define"></a>C语言中宏定义的#define</h4><p>1.简单的替换，如#define MAX 1024   在定义了这条指令后，指令后出现的MAX等效于1024，MAX在程序的预处理阶段被替换成1024。同理也可以进行文本替换如#define BBM BadBlockManage</p>
<p>2、用简单的宏定义来替代一些函数，#define max(a,b) ((a&gt;b)?a:b)   该指令实现了两个数比较大小并返回最大值的功能，很多情况下一些简单的功能用宏定义比函数要方便</p>
]]></content>
  </entry>
  <entry>
    <title>OS</title>
    <url>/2020/10/12/OS/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ps -ef |grep - 列出需要进程</span><br></pre></td></tr></table></figure>

<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p>![image-20201208132824117](/Users/xueqi/Library/Application Support/typora-user-images/image-20201208132824117.png)</p>
<h1 id="OS实验一：进程通信实验"><a href="#OS实验一：进程通信实验" class="headerlink" title="OS实验一：进程通信实验"></a>OS实验一：进程通信实验</h1><h2 id="一-管道和FIFO-命名管道"><a href="#一-管道和FIFO-命名管道" class="headerlink" title="一.管道和FIFO/命名管道"></a>一.管道和FIFO/命名管道</h2><p>最适合在进程之间实现生产者/消费者的交互。有些进程往管道里写数据，而另一些进程则从管道中读出数据。</p>
<p>在Linux中，popen()和pclose()都包含在C函数库中，popen()函数接收两个参数：可执行文件路径名filename和定义数据传输方向的字符串type。该函数返回一个指向FILE数据结构的指针。popen()函数实际执行以下操作：</p>
<ol>
<li>使用pipe()系统调用创建一个新管道</li>
<li>创建一个新进程，该进程又要执行以下操作：<ul>
<li>如果type是r，就把和该管道的写通道相关文件描述符拷贝到文件描述符1（标准输出）</li>
<li>如果type是w，就把和该管道的读通道相关的文件描述符拷贝到文件描述符0（标准输入）</li>
<li>关闭pipe()所返回的文件描述符</li>
<li>调用execve()系统调用来执行filename所指定的程序</li>
</ul>
</li>
<li>如果type是r，就关闭和该管道的写通道相关文件描述符，如果type是w，就关闭和该管道的读通道相关文件描述符。</li>
<li>返回FILE文件指针所指向的地址，这个指针仍然指向仍然打开的管道所涉及的任意文件描述符。</li>
</ol>
<p>在popen()函数被调用之后，父进程和子进程就可以通过这个管道交换信息：父进程可以使用该函数所返回的FILE指针来读或写数据，子进程所执行的程序分别把输入写入标准输出或从标准输入读取数据。</p>
<p>pclose()函数接受popen()所返回的文件指针作为参数，等待popen()所创建的进程结束。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">非阻塞情况下：</span></span><br><span class="line"><span class="comment">写端代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建命名管道</span></span><br><span class="line">    ret = mkfifo(<span class="string">&quot;my_fifo&quot;</span>, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只写并指定非阻塞方式打开</span></span><br><span class="line">    fd = open(<span class="string">&quot;myfifo&quot;</span>,O_WRONLY|O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open fifo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> send[<span class="number">100</span>] = <span class="string">&quot;Hello Jack&quot;</span>;</span><br><span class="line">    write(fd, send, <span class="built_in">strlen</span>(send));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;write to my_fifo buf=%s\n&quot;</span>,send);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = mkfifo(<span class="string">&quot;my_fifo&quot;</span>, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只读并以非阻塞方式打开</span></span><br><span class="line">    fd = open(<span class="string">&quot;my_fifo&quot;</span>,O_RDONLY|O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open fifo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> recv[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        read(fd, recv, <span class="keyword">sizeof</span>(recv));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read from my_fifo buf = [%s]\n&quot;</span>,recv);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二-消息队列"><a href="#二-消息队列" class="headerlink" title="二.消息队列"></a>二.消息队列</h2><p>进程彼此之间可以通过IPC消息进行通信。进程产生的每个消息都被发送到一个IPC消息队列中，这个消息一直存放在队列中直到另一个进程将其读走为止。</p>
<p>消息是由一个固定大小的首部header和一个可变长度的正文text组成的，可以使用一个整数值（消息类型）标识消息，这就允许进程有选择性的从消息队列中获取消息。只要进程从IPC消息队列中读出一个消息，内核就把这个消息删除。因此，一个进程只能接收一个给定的消息，</p>
<p>为了发送一个消息，进程要调用msgsnd()函数，传递以下参数：</p>
<ul>
<li>目标消息队列的IPC标识符</li>
<li>用户态缓冲区的地址，缓冲区中包含消息类型及消息正文</li>
<li>消息正文的大小</li>
</ul>
<p>进程要获得一个消息就要调用msgrcv()函数，传递给它以下参数：</p>
<ul>
<li>IPC消息队列资源的IPC标识符</li>
<li>指向用户态缓冲区的指针，消息类型和消息正文应该被拷贝到这个缓冲区</li>
<li>该缓冲区的大小</li>
<li>一个值t，指定应该获得什么消息<ul>
<li>如果t的值是0，就返回队列中的第一个消息</li>
<li>如果t的值是正数，就返回队列类型等于t的第一个消息</li>
<li>如果t的值是负数，就返回消息类型小于等于t绝对值的最小的第一个消息</li>
</ul>
</li>
</ul>
<blockquote>
<p>在任意进程间有选择性的进行通讯</p>
<p>发送数据是需要携带一定的消息标志</p>
<p>消息队列创建后由于是存在于内核中由内核管理，使用过后需要人工删除以释放资源</p>
<p>当一个发送方往消息队列中发送数据时，接收方一直还没接收，数据会一直在消息队列里等待接收方的出现</p>
<p>当一个发送方往消息队列中发送数据时，接收方一直还没接收，数据会一直在消息队列里等待接收方的出现</p>
</blockquote>
<h2 id="三-共享内存"><a href="#三-共享内存" class="headerlink" title="三.共享内存"></a>三.共享内存</h2><h3 id="共享内存使用的函数"><a href="#共享内存使用的函数" class="headerlink" title="共享内存使用的函数"></a>共享内存使用的函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">size_t</span> size, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">const</span> <span class="keyword">void</span> *shm_addr, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *shm_addr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>int shmget(key_t <strong>key</strong>,size_t <strong>size</strong>, int <strong>shmflg</strong>);<ul>
<li><strong>key</strong>：和信号量一样，程序需要提供一个参数key，它有效的为共享内存段命名。</li>
<li><strong>size</strong>：以字节为单位指定需要共享的内存容量</li>
<li><strong>shmflg</strong>：</li>
</ul>
</li>
</ol>
<h1 id="CPU调度概述"><a href="#CPU调度概述" class="headerlink" title="CPU调度概述"></a>CPU调度概述</h1><p>多任务操作系统的基础，目的是使得CPU尽可能用于执行指令，从而提高CPU效率</p>
<ol>
<li>长程和短程调度</li>
<li>调度队列</li>
<li>中程调度</li>
<li>CPU脉冲周期</li>
<li>调度方式</li>
<li>调度过程和时机</li>
<li>调度准则</li>
</ol>
<h6 id="CPU调度分为长程调度和短程调度"><a href="#CPU调度分为长程调度和短程调度" class="headerlink" title="CPU调度分为长程调度和短程调度"></a>CPU调度分为长程调度和短程调度</h6><p>运行状态图中，有些状态的转换时必然的：运行状态完成的状态必然转换为结束状态，而有些状态的转换需要CPU的干预，因为进程间存在着一定的竞争，需要OS<strong>选择</strong>一个进程来进行这种转换，这种选择称为CPU调度。</p>
<h2 id="长程调度"><a href="#长程调度" class="headerlink" title="长程调度"></a>长程调度</h2><p>“道”：允许在内存中运行的最多进程数</p>
<p>由于CPU内存的硬件资源和性能是有限的，运行在其上的进程不能无限大</p>
<p>并不是每个用户创建的进程都能够马上被装入内存并运行</p>
<p>![image-20201014203834953](/Users/xueqi/Library/Application Support/typora-user-images/image-20201014203834953.png)</p>
<p>![image-20201014212435127](/Users/xueqi/Library/Application Support/typora-user-images/image-20201014212435127.png)</p>
<p>![image-20201014223842281](/Users/xueqi/Library/Application Support/typora-user-images/image-20201014223842281.png)</p>
<p>![image-20201015101544648](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015101544648.png)</p>
<p>![image-20201015112301870](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015112301870.png)</p>
<p>![image-20201015113500787](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015113500787.png)</p>
<p>![image-20201015125801021](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015125801021.png)</p>
<p>![image-20201015211058475](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015211058475.png)</p>
<p>![image-20201015214900528](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015214900528.png)</p>
<p>![image-20201015220813553](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015220813553.png)</p>
<p>![image-20201015234239536](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015234239536.png)</p>
<p>![image-20201015235207708](/Users/xueqi/Library/Application Support/typora-user-images/image-20201015235207708.png)</p>
<h1 id="第六章-进程同步"><a href="#第六章-进程同步" class="headerlink" title="第六章 进程同步"></a>第六章 进程同步</h1><h1 id="6-1临界区"><a href="#6-1临界区" class="headerlink" title="6.1临界区"></a>6.1临界区</h1><p>多道程序设计技术是现代操作系统运行的基础，在进程并发执行时，各个协通进程运行次序的不同会导致不同的运行结果，从而出现运行错误。</p>
<p>同步和互斥技术保证在并发条件下进程运行的正确，一致性</p>
<h2 id="竞争条件和临界区"><a href="#竞争条件和临界区" class="headerlink" title="竞争条件和临界区"></a>竞争条件和临界区</h2><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h2 id="生产者消费问题"><a href="#生产者消费问题" class="headerlink" title="生产者消费问题"></a>生产者消费问题</h2><h2 id="读者写着问题"><a href="#读者写着问题" class="headerlink" title="读者写着问题"></a>读者写着问题</h2><h2 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h2><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main thread = <span class="keyword">new</span> Main();</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;This code is outside of the thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This code is running in a thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





































]]></content>
      <tags>
        <tag>底层</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2020/10/27/Python/</url>
    <content><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><h3 id="与-的区别："><a href="#与-的区别：" class="headerlink" title="/与//的区别："></a>/与//的区别：</h3><ul>
<li>/是除法，如2/3=0.6666，返回浮点类型</li>
<li>//是向下取整的除法，如3//2=1，6.0//4=1，返回整数类型</li>
</ul>
<h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>执行一个字符串表达式，并返回表达式的值<a href="https://www.cnblogs.com/dadadechengzi/p/6149930.html">理解</a></p>
<blockquote>
<p>in：eval(“3+5”)</p>
<p>out：21</p>
</blockquote>
<p>可以将字符串形式的列表、字典、元组分别转换为列表、字典、元组，eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;[[1,2], [3,4], [5,6], [7,8], [9,0]]&quot;</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">Out[<span class="number">3</span>]: [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">0</span>]]</span><br><span class="line">type(b)</span><br><span class="line">Out[<span class="number">4</span>]: list</span><br><span class="line">a = <span class="string">&quot;&#123;1: &#x27;a&#x27;, 2: &#x27;b&#x27;&#125;&quot;</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">Out[<span class="number">7</span>]: &#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line">type(b)</span><br><span class="line">Out[<span class="number">8</span>]: dict</span><br><span class="line">a = <span class="string">&quot;([1,2], [3,4], [5,6], [7,8], (9,0))&quot;</span></span><br><span class="line">b = eval(a)</span><br><span class="line">b</span><br><span class="line">Out[<span class="number">11</span>]: ([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>], (<span class="number">9</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="求一个三位数的个十百位的数值"><a href="#求一个三位数的个十百位的数值" class="headerlink" title="求一个三位数的个十百位的数值"></a>求一个三位数的个十百位的数值</h3><p>产生一个随机 3 位正整数，并将该整数的数字首尾互换输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">x = randint(<span class="number">100</span>, <span class="number">999</span>)</span><br><span class="line">print(x)</span><br><span class="line">x_1: int = x % <span class="number">10</span></span><br><span class="line">x_10: int = x // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">x_100: int = x // <span class="number">100</span></span><br><span class="line">print(<span class="number">100</span>*x_1+<span class="number">10</span>*x_10+x_100)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
