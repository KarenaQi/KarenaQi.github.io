<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青墨山音</title>
  
  <subtitle>再不学习就没书念了!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-11T05:18:42.944Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django</title>
    <link href="http://example.com/2020/10/04/Django/"/>
    <id>http://example.com/2020/10/04/Django/</id>
    <published>2020-10-04T03:05:35.000Z</published>
    <updated>2020-10-11T05:18:42.944Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP：无状态、短连接</p><p>TCP：不断开</p><p>Web应用（网站）：</p><ul><li><p>HTTP协议</p><ul><li>发送：<ul><li>GET / HTTP/1.1</li><li>Host: 127.0.0.1:8080</li><li>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</li><li>Upgrade-Insecure-Requests: 1</li><li>Cookie: csrftoken=lz5U0q5UaFo6ja94wX7Eq3gu4DXtnJHAboN7u0IsWy4WcRctUsXw11aXw2ASC70O; sessionid=h5et3qab3wzvwjhmx30j3nr09m7d7khc</li><li>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15</li><li>Accept-Language: zh-cn</li><li>Accept-Encoding: gzip, deflate</li><li>Connection: keep-alive</li></ul></li><li>响应<ul><li>用户在页面上看到内容本质是字符串。看到的页面效果，由于浏览器解析</li></ul></li></ul></li><li><p>浏览器（socket客户端）</p><p>2、<a href="http://www.cnblogs.com/">www.cnblogs.com</a> (42.121.252.58，80)</p><ul><li>sk.socket()</li><li>sk.connect(42.121.252.58，80)</li><li>sk.send(‘lalala’)</li></ul><p>5、接收</p><p>6、连接断开</p></li><li><p>博客园（socket服务端）</p><p>1、监听ip和端口(42.121.252.58，80)</p><p>​        while（true）：</p><p>​            用户 = 等待用户连接</p><p>​            3、收到‘lalala’</p><p>​            4、响应‘好‘</p><h4 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h4><p>pip3 install django</p><p>命令：</p><p>#创建Django程序</p><p>django-admin startproject mysite</p><p>wsgi.py网关协议</p><p>#进入程序目录</p><p>cd mysite</p><p>#启动socket服务端，等待用户发送请求</p><p>python manage.py runserver 127.0.0.1:8080#如果后面什么都不加，默认访问8000端口</p><h5 id="Django程序目录"><a href="#Django程序目录" class="headerlink" title="Django程序目录"></a>Django程序目录</h5><ul><li>mysite<ul><li>mysite<ul><li>-settings.py    Django配置文件</li><li>-url.py  路由系统：URL函数</li><li>wsgi.py 用于定义Django用socket，wsgiref，uwsgi</li></ul></li></ul></li><li>manage.py 对当前Django程序对所有操作可以基于python manage.py runserver </li></ul><ol><li><p>创建project</p></li><li><p>配置</p><ol><li><p>模版路径</p><p>创建template目录</p><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR / <span class="string">&#x27;templates&#x27;</span>)]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>静态文件路径</p><p>创建static目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>),</span><br><span class="line">    <span class="comment"># 静态文件路径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>额外配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>url对应关系</p><p>url对应一个函数，函数至少有一个参数（request）请求发过来至少获取用户的一条信息，request.method获取用户的提交方式，request.post获得post提交过来的数据（用表单提交过来的数据），request.get获得get提交过来的数据（在url上提交过来的数据）</p><p>return返回的数据：HttpResponse返回字符串，render给它数据和模版让它渲染，渲染之后返回给用户，redirect重定向，跳转到某个地址    #使用模版渲染时Django还会提供特殊的机制：两个大括号，只要在render的时候额外写个值，页面上显示的就是他的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/login/ login</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">  request.method()</span><br><span class="line">request.POST-&gt;请求体</span><br><span class="line">request.GET-&gt;请求头的url中# 以post方式提交数据的时候，在get里能获取到值</span><br><span class="line"> <span class="keyword">return</span>  HttpResponse()<span class="comment"># 返回字符串</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>模版,&#123;......&#125;后面加值渲染)</span><br><span class="line"> <span class="keyword">return</span> redirect(<span class="string">&#x27;要跳转的网址&#x27;</span>)</span><br></pre></td></tr></table></figure><p>发GET请求时，只有request.GET有值（去url中解析出来放到这里）</p><p>发POST请求时，request.GET和request.POST都可能有值，url可能是这样的：/login/?page=123</p><p>在URL上传递的值，通过request.GET可以获取到</p></li><li><p>模版引擎中的特殊标记</p><p>login.html</p><p>​    </p><p>def login(request):</p><p>​        return render(request, ‘login.html’, {‘name’:’alex})</p><p>模版的特殊标记里还支持循环</p></li></ol></li></ol></li></ul><h4 id="学员管理"><a href="#学员管理" class="headerlink" title="学员管理"></a>学员管理</h4><ul><li><h5 id="表"><a href="#表" class="headerlink" title="表"></a>表</h5><ul><li>班级：<ul><li>ID         title</li><li>1           4期</li><li>2           5期</li></ul></li><li>学生：<ul><li>ID         name        班级ID（FK）</li><li>1             lily                  1</li></ul></li><li>老师：老师应该和班级创建关系多对多<ul><li>ID         name</li><li>1           Jason </li><li>2            kelly</li></ul></li><li>老师班级关系表<ul><li>id        老师ID       班级ID</li><li>1            1                 1</li><li>2            1                 2</li><li>3            2                 2</li></ul></li></ul></li><li><p>单表操作</p><ul><li>增</li><li>删</li><li>改</li><li>查</li></ul></li><li><p>一对多操作</p><ul><li>增</li><li>删</li><li>改</li><li>查</li></ul></li><li><p>多对多操作</p><ul><li>增</li><li>删</li><li>改</li><li>查</li></ul></li></ul><p>本质上增删改查都是利用pymysql去操作</p><ul><li>form表单提交，页面会刷新，刷新成什么需要后台指定</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一点提交，在班级列表中看到的不是原来的数据表示已经刷新了，</span></span><br><span class="line"><span class="comment"># redirect有和HttpResponse不一样的地方，根源上是由于form表单一提交数据，页面肯定会刷新，</span></span><br><span class="line"><span class="comment"># 如果返回的是HttpResponse，里边返回什么则刷新成什么</span></span><br><span class="line"><span class="comment"># 如果返回的是redirect，直接跳转到另外一个地址，它返回什么，页面就跳转到哪里</span></span><br><span class="line"><span class="comment"># form表单一提交，页面就会刷新，之所以刷新之后能看到新添加的数据，是因为我们规定了刷新之后不要瞎跳转，而是跳转到当前页面，这样数据就一下子展现出来了</span></span><br><span class="line"><span class="comment"># form表单的特性就是会刷新页面，只不过我们让它返回一个redirect，看到的是我们想要的东西了</span></span><br></pre></td></tr></table></figure><h4 id="Django基础"><a href="#Django基础" class="headerlink" title="Django基础"></a>Django基础</h4><ol><li><p>Web框架的本质：</p><ol><li>本质：socket</li><li>基于Http协议<ul><li>请求头</li><li>请求体</li></ul></li><li>模版引擎的渲染是在客户端还是服务端渲染的？（是在浏览器上渲染还是在服务器上渲染的？）<ul><li>本质上客户端服务端的交互靠的是字符串，发一个请求给服务端，服务端拿到模版拿到数据进行渲染，渲染完成之后成为了一个新的字符串才给客户端浏览器的，所以模版引擎的渲染是在服务端上进行的，只不过它生成的字符串里面包含了html的特殊标记，这个标记到了浏览器才进行html标签的识别！<strong>重点</strong></li><li>本质上传输的是字符串</li></ul></li></ol></li><li><p>Django</p><ol><li><p>安装</p></li><li><p>Django-admin start project mysite</p></li><li><p>wsgi（web服务网关接口）是一个协议，实现这个协议有很多东西，本质上就是帮你写了一个socket</p></li><li><p>创建project的步骤</p><ul><li><p>配置</p><ul><li>模版路径</li><li>静态文件</li><li>CSRF注释掉</li></ul></li><li><p>urls.py</p><ul><li><p>一个url对应一个函数，在函数里面就可以处理业务逻辑</p></li><li><p>对函数的要求：至少有一个参数</p><ul><li><p>def index(request):    # request包含和请求相关的所有东西，</p><ul><li>request.method()</li><li>request.GET</li><li>request.POST</li><li>返回值：</li><li>return HttpResponse（字符串）</li><li>return render（request, ‘模版的路径，从template往后找’, {}）</li><li>return redirect（’URL‘）</li></ul></li><li><p>模版渲染</p><ul><li><p>def  index(request):</p><ul><li><p>return render（request, ‘模版的路径，从template往后找’,</p><p>{    </p><p>​        ‘k1’:’v1’,</p><p>​        ‘k2’:[1, 2, 3, 43],</p><p>​        ‘k3’:{‘x’…..}</p><p>}</p><p>）</p></li></ul></li><li><p>在index.html中</p><ul><li><pre><code class="html">- &lt; h1&gt;&#123;&#123;k1&#125;&#125;&lt;/ h1 &gt;- &lt; h1&gt;&#123;&#123;k2.0&#125;&#125;&lt;/ h1 &gt;- 循环  &#123;% for item in k2%&#125;                                  ​< h1>&#123;&#123;item&#125;&#125;</ h1 >                                  &#123;% endfor %&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 虚拟化技术</span><br><span class="line"></span><br><span class="line">   1. 虚拟机</span><br><span class="line">   2. 虚拟容器</span><br><span class="line">      1. Docker</span><br><span class="line">   3. 虚拟环境</span><br><span class="line">      1. python专用</span><br><span class="line">      2. 将python依赖隔离，virtualenv：python专属的虚拟环境，用来保持一个干净的环境</span><br><span class="line"></span><br><span class="line">4. MVC设计模式（Model View Controller）</span><br><span class="line"></span><br><span class="line">   - Model：用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法，是web应用程序中用于处理应用程序的数据逻辑部分，Model通常只提供功能性的接口，通过这些接口可以获取Model的所有功能；比如对数据的操作就是增（注册）删（删除）改（禁言）查</span><br><span class="line">   - View：负责数据的显示和呈现，是对用户的直接输出，给用户看的</span><br><span class="line">   - Controller：负责从用户端收集用户端输入，可以看成是View的反向功能，主要处理用户交互</span><br><span class="line"></span><br><span class="line">5. MVT模式：</span><br><span class="line"></span><br><span class="line">   本质上与MVC没什么差别，也是为了各组件之间为了保持松耦合关系，只是定义上有些许不同</span><br><span class="line"></span><br><span class="line">   - Model：负责业务对象与数据库（ORM）的对象</span><br><span class="line">   - View：负责业务逻辑，并在适当的时候调用Model和Template（类似MVC中的Controller）</span><br><span class="line">   - Template：负责把页面展示给用户（类似MVC中的View）</span><br><span class="line">   - 注：Django中还有一个url分发器，也可以叫做路由，主要用来将一个个url页面的请求分发给不同的view进行处理，view再调用相应的Model和Template</span><br><span class="line"></span><br><span class="line">### Ajax（jQuery）</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">$.ajax(</span><br><span class="line">&#123;</span><br><span class="line">url:&#39;&#39;,</span><br><span class="line">type:&#39;GET&#39;,</span><br><span class="line">data:&#123;k1:&#39;v1&#39;&#125;,</span><br><span class="line">success:function(arg)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul></li></ul></li></ul></li></ol></li></ol><p>只要是模态对话框，用Ajax</p><p>前端请求后端    </p><h3 id="母版：导航条的页面只写一次就可以了，让其他页面继承此页面"><a href="#母版：导航条的页面只写一次就可以了，让其他页面继承此页面" class="headerlink" title="母版：导航条的页面只写一次就可以了，让其他页面继承此页面"></a>母版：导航条的页面只写一次就可以了，让其他页面继承此页面</h3><h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><ul><li><h4 id="保存在用户浏览器端的键值对，利用这个东西可以做用户登录：用户登录的凭证，密码保存与否"><a href="#保存在用户浏览器端的键值对，利用这个东西可以做用户登录：用户登录的凭证，密码保存与否" class="headerlink" title="保存在用户浏览器端的键值对，利用这个东西可以做用户登录：用户登录的凭证，密码保存与否"></a>保存在用户浏览器端的键值对，利用这个东西可以做用户登录：用户登录的凭证，密码保存与否</h4></li><li><h4 id="服务端可以向用户浏览器写cookie"><a href="#服务端可以向用户浏览器写cookie" class="headerlink" title="服务端可以向用户浏览器写cookie"></a>服务端可以向用户浏览器写cookie</h4></li><li><h4 id="客户端每次访问请求时，会携带cookie去"><a href="#客户端每次访问请求时，会携带cookie去" class="headerlink" title="客户端每次访问请求时，会携带cookie去"></a>客户端每次访问请求时，会携带cookie去</h4></li><li><h4 id="禁用浏览器的cookie，向服务器发没有cookie的请求，第一次向浏览器返回一个1，下一次来还是不带cookie，仍可以继续投票"><a href="#禁用浏览器的cookie，向服务器发没有cookie的请求，第一次向浏览器返回一个1，下一次来还是不带cookie，仍可以继续投票" class="headerlink" title="禁用浏览器的cookie，向服务器发没有cookie的请求，第一次向浏览器返回一个1，下一次来还是不带cookie，仍可以继续投票"></a>禁用浏览器的cookie，向服务器发没有cookie的请求，第一次向浏览器返回一个1，下一次来还是不带cookie，仍可以继续投票</h4></li><li><h4 id="应用：投票、用户登录"><a href="#应用：投票、用户登录" class="headerlink" title="应用：投票、用户登录"></a>应用：投票、用户登录</h4></li><li><h4 id="cookie可以设置超时时间"><a href="#cookie可以设置超时时间" class="headerlink" title="cookie可以设置超时时间"></a>cookie可以设置超时时间</h4></li></ul><h3 id="路由系统"><a href="#路由系统" class="headerlink" title="路由系统"></a>路由系统</h3><h3 id="视图函数-CBV，FBV"><a href="#视图函数-CBV，FBV" class="headerlink" title="视图函数 CBV，FBV"></a>视图函数 CBV，FBV</h3><h3 id="ORM操作"><a href="#ORM操作" class="headerlink" title="ORM操作"></a>ORM操作</h3><p>![image-20201006131257792](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006131257792.png)</p><p>![image-20201006131337036](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006131337036.png)</p><p>![image-20201006131404232](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006131404232.png)</p><p>![image-20201006132515897](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006132515897.png)</p><p>![image-20201006132537757](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006132537757.png)</p><p>![image-20201006132602048](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006132602048.png)</p><p>![image-20201006132617162](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006132617162.png)</p><p>![image-20201006132641535](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006132641535.png)</p><p>![image-20201006141602787](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006141602787.png)</p><p>模板在客户端/浏览器是不认的，它将我们写的模板语言转换成了html</p><p>shortcuts简写，将模板加进来并且渲染</p><p>模板的过程：帮我们将数据从python代码传递到模版代码中</p><h1 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h1><p>轻量级的嵌入式级数据库</p><p>特点是小：常用场景Android IOS WP</p><p>数据库常规操作相似度和MySQL达95%</p><h1 id="万能键alt-enter"><a href="#万能键alt-enter" class="headerlink" title="万能键alt+enter"></a>万能键alt+enter</h1><h1 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h1><h4 id="两种"><a href="#两种" class="headerlink" title="两种"></a>两种</h4><ul><li>在APP中中进行模板配置<ul><li>只需在APP根目录中创建templates文件即可</li><li>如果想让代码自动提示，我们应该标记文件夹为模板文件夹</li></ul></li><li>在项目目录中进行模板配置<ul><li>需要在项目目录中创建templates文件夹</li><li>需要在settings进行注册</li></ul></li><li>在开发中使用第二种<ul><li>模板可以继承，复用</li></ul></li></ul><h1 id="路由优化配置"><a href="#路由优化配置" class="headerlink" title="路由优化配置"></a>路由优化配置</h1><ul><li>项目如果逻辑过于复杂，可以进行拆分</li><li>拆分为多个APP</li><li>继续拆分路由器urls<ul><li>在App中创建自己的urls<ul><li>urlpatterns路由规则列表</li><li>在根urls中进行子路由的包含</li></ul></li><li>子路由使用<ul><li>根路由规则 + 子路由的规则</li></ul></li></ul></li><li>![image-20201006102924378](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006102924378.png)</li></ul><h1 id="Models-使用了ORM技术"><a href="#Models-使用了ORM技术" class="headerlink" title="Models 使用了ORM技术"></a>Models 使用了ORM技术</h1><ul><li>Object Relational Mapping对象关系映射，可以理解为翻译机</li><li>![image-20201006142052279](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006142052279.png)</li><li>对业务逻辑进行了一个解耦合<ul><li>object.save()</li><li>object.delete()</li></ul></li><li>关系型数据库<ul><li>DDL</li><li>通过模型定义实现数据库表的定义</li></ul></li><li>数据操作<ul><li>增删改查</li><li>存储<ul><li>save（）</li></ul></li><li>查询<ul><li>查所有 object.all()</li><li>查单个object.get(pk = ***)</li></ul></li><li>更新<ul><li>基于查询的</li><li>查好的对象，修改属性，再save()</li></ul></li><li>删除<ul><li>基于查询的</li><li>调用delete()</li></ul></li></ul></li></ul><h1 id="连接mysql驱动"><a href="#连接mysql驱动" class="headerlink" title="连接mysql驱动"></a>连接mysql驱动</h1><ol><li><p>mysqlclient</p><ul><li><p>python2、3都能直接使用</p></li><li><p>致命缺点：对mysql安装有要求，必须指定位置存放配置文件</p></li></ul></li><li><p>python-mysql支持2不支持3</p></li><li><p>pymysql：python2、3都支持，还可以伪装成前面的库</p></li></ol><h2 id="数据库中的数据类型：字符串、数字、时间日期"><a href="#数据库中的数据类型：字符串、数字、时间日期" class="headerlink" title="数据库中的数据类型：字符串、数字、时间日期"></a>数据库中的数据类型：字符串、数字、时间日期</h2><p>![image-20201006142257418](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006142257418.png)</p><p>![image-20201006143133716](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006143133716.png)</p><p>![image-20201006144942843](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006144942843.png)</p><p>Person.filter().****.exclude()可以连续使用，链式调用</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ul><li>对象方法<ul><li>可以调用对象的属性，也可以调用类的属性</li></ul></li><li>类方法<ul><li>不能调用对象属性，只能调用类属性</li></ul></li><li>静态方法<ul><li>啥都不能调用，不能获取对象属性，也不能获取类属性</li><li>只是寄生在类上</li></ul></li></ul><p>![image-20201006160253786](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006160253786.png)</p><p>当Model中加了一个属性，需要重新迁移，但如果只是一个函数不需要重新迁移，因此写类方法</p><p>![image-20201006161311500](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006161311500.png)</p><p>![image-20201006161348674](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006161348674.png)</p><p>[{‘id’: 3, ‘p_name’: ‘Tom2’, ‘p_age’: 4, ‘p_sex’: False, ‘p_hobby’: None}<br>{‘id’: 6, ‘p_name’: ‘Tom5’, ‘p_age’: 0, ‘p_sex’: False, ‘p_hobby’: None}]</p><p>![image-20201006162402409](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006162402409.png)</p><h3 id="获取单个对象"><a href="#获取单个对象" class="headerlink" title="获取单个对象"></a>获取单个对象</h3><ul><li>![image-20201006162711185](/Users/xueqi/Library/Application Support/typora-user-images/image-20201006162711185.png)</li></ul><h1 id="Django-使用现有数据库生成-models"><a href="#Django-使用现有数据库生成-models" class="headerlink" title="Django 使用现有数据库生成 models"></a>Django 使用现有数据库生成 models</h1><p><a href="https://www.jianshu.com/p/037bd7e20a7a">https://www.jianshu.com/p/037bd7e20a7a</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HTTP：无状态、短连接&lt;/p&gt;
&lt;p&gt;TCP：不断开&lt;/p&gt;
&lt;p&gt;Web应用（网站）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送：&lt;ul&gt;
&lt;li&gt;GET / HTTP/1.1&lt;/li&gt;
&lt;li&gt;Host: 127.0.0.1:808</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/10/03/hello-world/"/>
    <id>http://example.com/2020/10/03/hello-world/</id>
    <published>2020-10-03T13:12:33.205Z</published>
    <updated>2020-10-03T13:12:33.205Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
